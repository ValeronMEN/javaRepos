//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Matrix.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IMatrixListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class MatrixBaseListener : IMatrixListener {
	/// <summary>
	/// Enter a parse tree produced by the <c>MainRule</c>
	/// labeled alternative in <see cref="MatrixParser.root"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMainRule([NotNull] MatrixParser.MainRuleContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>MainRule</c>
	/// labeled alternative in <see cref="MatrixParser.root"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMainRule([NotNull] MatrixParser.MainRuleContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>GoToInitialize</c>
	/// labeled alternative in <see cref="MatrixParser.input"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGoToInitialize([NotNull] MatrixParser.GoToInitializeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>GoToInitialize</c>
	/// labeled alternative in <see cref="MatrixParser.input"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGoToInitialize([NotNull] MatrixParser.GoToInitializeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>GoToRank</c>
	/// labeled alternative in <see cref="MatrixParser.input"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGoToRank([NotNull] MatrixParser.GoToRankContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>GoToRank</c>
	/// labeled alternative in <see cref="MatrixParser.input"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGoToRank([NotNull] MatrixParser.GoToRankContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>DivisionFromStart</c>
	/// labeled alternative in <see cref="MatrixParser.input"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDivisionFromStart([NotNull] MatrixParser.DivisionFromStartContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>DivisionFromStart</c>
	/// labeled alternative in <see cref="MatrixParser.input"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDivisionFromStart([NotNull] MatrixParser.DivisionFromStartContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Initialize</c>
	/// labeled alternative in <see cref="MatrixParser.init"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInitialize([NotNull] MatrixParser.InitializeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Initialize</c>
	/// labeled alternative in <see cref="MatrixParser.init"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInitialize([NotNull] MatrixParser.InitializeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>RankRule</c>
	/// labeled alternative in <see cref="MatrixParser.rank"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRankRule([NotNull] MatrixParser.RankRuleContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>RankRule</c>
	/// labeled alternative in <see cref="MatrixParser.rank"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRankRule([NotNull] MatrixParser.RankRuleContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>MultsumSum</c>
	/// labeled alternative in <see cref="MatrixParser.multsum"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMultsumSum([NotNull] MatrixParser.MultsumSumContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>MultsumSum</c>
	/// labeled alternative in <see cref="MatrixParser.multsum"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMultsumSum([NotNull] MatrixParser.MultsumSumContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>MultsumMult</c>
	/// labeled alternative in <see cref="MatrixParser.multsum"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMultsumMult([NotNull] MatrixParser.MultsumMultContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>MultsumMult</c>
	/// labeled alternative in <see cref="MatrixParser.multsum"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMultsumMult([NotNull] MatrixParser.MultsumMultContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>MultSumSumOp</c>
	/// labeled alternative in <see cref="MatrixParser.sum"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMultSumSumOp([NotNull] MatrixParser.MultSumSumOpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>MultSumSumOp</c>
	/// labeled alternative in <see cref="MatrixParser.sum"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMultSumSumOp([NotNull] MatrixParser.MultSumSumOpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>InverSumSumOp</c>
	/// labeled alternative in <see cref="MatrixParser.sum"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInverSumSumOp([NotNull] MatrixParser.InverSumSumOpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>InverSumSumOp</c>
	/// labeled alternative in <see cref="MatrixParser.sum"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInverSumSumOp([NotNull] MatrixParser.InverSumSumOpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>InverOp</c>
	/// labeled alternative in <see cref="MatrixParser.sum"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInverOp([NotNull] MatrixParser.InverOpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>InverOp</c>
	/// labeled alternative in <see cref="MatrixParser.sum"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInverOp([NotNull] MatrixParser.InverOpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>InverMultMultOp</c>
	/// labeled alternative in <see cref="MatrixParser.mult"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInverMultMultOp([NotNull] MatrixParser.InverMultMultOpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>InverMultMultOp</c>
	/// labeled alternative in <see cref="MatrixParser.mult"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInverMultMultOp([NotNull] MatrixParser.InverMultMultOpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Inversion</c>
	/// labeled alternative in <see cref="MatrixParser.inver"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInversion([NotNull] MatrixParser.InversionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Inversion</c>
	/// labeled alternative in <see cref="MatrixParser.inver"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInversion([NotNull] MatrixParser.InversionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>GoToMatrix</c>
	/// labeled alternative in <see cref="MatrixParser.exp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGoToMatrix([NotNull] MatrixParser.GoToMatrixContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>GoToMatrix</c>
	/// labeled alternative in <see cref="MatrixParser.exp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGoToMatrix([NotNull] MatrixParser.GoToMatrixContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Variable</c>
	/// labeled alternative in <see cref="MatrixParser.exp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterVariable([NotNull] MatrixParser.VariableContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Variable</c>
	/// labeled alternative in <see cref="MatrixParser.exp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitVariable([NotNull] MatrixParser.VariableContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>GoToVect</c>
	/// labeled alternative in <see cref="MatrixParser.matr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGoToVect([NotNull] MatrixParser.GoToVectContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>GoToVect</c>
	/// labeled alternative in <see cref="MatrixParser.matr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGoToVect([NotNull] MatrixParser.GoToVectContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>GoToNumber</c>
	/// labeled alternative in <see cref="MatrixParser.vect"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGoToNumber([NotNull] MatrixParser.GoToNumberContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>GoToNumber</c>
	/// labeled alternative in <see cref="MatrixParser.vect"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGoToNumber([NotNull] MatrixParser.GoToNumberContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
