//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Matrix.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class MatrixLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, NL=4, WS=5, ID=6, NUMBER=7, EQUAL=8, SUM=9, MULT=10, 
		RANK=11, INVER=12;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "NL", "WS", "ID", "NUMBER", "EQUAL", "SUM", "MULT", 
		"RANK", "INVER"
	};


	public MatrixLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public MatrixLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'['", "','", "']'", "'\n'", null, null, null, "'='", "'+'", "'*'", 
		"'^R'", "'^1'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "NL", "WS", "ID", "NUMBER", "EQUAL", "SUM", "MULT", 
		"RANK", "INVER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Matrix.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static MatrixLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\xE', 'R', '\b', '\x1', '\x4', '\x2', '\t', '\x2', '\x4', 
		'\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', 
		'\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', 
		'\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', 
		'\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x6', '\x6', '%', '\n', '\x6', 
		'\r', '\x6', '\xE', '\x6', '&', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', 
		'\x3', '\a', '\a', '\a', '-', '\n', '\a', '\f', '\a', '\xE', '\a', '\x30', 
		'\v', '\a', '\x3', '\b', '\x5', '\b', '\x33', '\n', '\b', '\x3', '\b', 
		'\x6', '\b', '\x36', '\n', '\b', '\r', '\b', '\xE', '\b', '\x37', '\x3', 
		'\b', '\x6', '\b', ';', '\n', '\b', '\r', '\b', '\xE', '\b', '<', '\x3', 
		'\b', '\x3', '\b', '\x6', '\b', '\x41', '\n', '\b', '\r', '\b', '\xE', 
		'\b', '\x42', '\x5', '\b', '\x45', '\n', '\b', '\x3', '\t', '\x3', '\t', 
		'\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x2', '\x2', 
		'\xE', '\x3', '\x3', '\x5', '\x4', '\a', '\x5', '\t', '\x6', '\v', '\a', 
		'\r', '\b', '\xF', '\t', '\x11', '\n', '\x13', '\v', '\x15', '\f', '\x17', 
		'\r', '\x19', '\xE', '\x3', '\x2', '\x6', '\x5', '\x2', '\v', '\v', '\xF', 
		'\xF', '\"', '\"', '\x5', '\x2', '\x43', '\\', '\x61', '\x61', '\x63', 
		'|', '\x6', '\x2', '\x32', ';', '\x43', '\\', '\x61', '\x61', '\x63', 
		'|', '\x3', '\x2', '\x32', ';', '\x2', 'X', '\x2', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x5', '\x3', '\x2', '\x2', '\x2', '\x2', '\a', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\t', '\x3', '\x2', '\x2', '\x2', '\x2', '\v', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\r', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\xF', '\x3', '\x2', '\x2', '\x2', '\x2', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x13', '\x3', '\x2', '\x2', '\x2', '\x2', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x17', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\x3', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\x5', '\x1D', '\x3', '\x2', '\x2', '\x2', '\a', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\t', '!', '\x3', '\x2', '\x2', '\x2', '\v', '$', 
		'\x3', '\x2', '\x2', '\x2', '\r', '*', '\x3', '\x2', '\x2', '\x2', '\xF', 
		'\x32', '\x3', '\x2', '\x2', '\x2', '\x11', '\x46', '\x3', '\x2', '\x2', 
		'\x2', '\x13', 'H', '\x3', '\x2', '\x2', '\x2', '\x15', 'J', '\x3', '\x2', 
		'\x2', '\x2', '\x17', 'L', '\x3', '\x2', '\x2', '\x2', '\x19', 'O', '\x3', 
		'\x2', '\x2', '\x2', '\x1B', '\x1C', '\a', ']', '\x2', '\x2', '\x1C', 
		'\x4', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x1E', '\a', '.', '\x2', '\x2', 
		'\x1E', '\x6', '\x3', '\x2', '\x2', '\x2', '\x1F', ' ', '\a', '_', '\x2', 
		'\x2', ' ', '\b', '\x3', '\x2', '\x2', '\x2', '!', '\"', '\a', '\f', '\x2', 
		'\x2', '\"', '\n', '\x3', '\x2', '\x2', '\x2', '#', '%', '\t', '\x2', 
		'\x2', '\x2', '$', '#', '\x3', '\x2', '\x2', '\x2', '%', '&', '\x3', '\x2', 
		'\x2', '\x2', '&', '$', '\x3', '\x2', '\x2', '\x2', '&', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\'', '(', '\x3', '\x2', '\x2', '\x2', '(', ')', 
		'\b', '\x6', '\x2', '\x2', ')', '\f', '\x3', '\x2', '\x2', '\x2', '*', 
		'.', '\t', '\x3', '\x2', '\x2', '+', '-', '\t', '\x4', '\x2', '\x2', ',', 
		'+', '\x3', '\x2', '\x2', '\x2', '-', '\x30', '\x3', '\x2', '\x2', '\x2', 
		'.', ',', '\x3', '\x2', '\x2', '\x2', '.', '/', '\x3', '\x2', '\x2', '\x2', 
		'/', '\xE', '\x3', '\x2', '\x2', '\x2', '\x30', '.', '\x3', '\x2', '\x2', 
		'\x2', '\x31', '\x33', '\a', '/', '\x2', '\x2', '\x32', '\x31', '\x3', 
		'\x2', '\x2', '\x2', '\x32', '\x33', '\x3', '\x2', '\x2', '\x2', '\x33', 
		'\x44', '\x3', '\x2', '\x2', '\x2', '\x34', '\x36', '\t', '\x5', '\x2', 
		'\x2', '\x35', '\x34', '\x3', '\x2', '\x2', '\x2', '\x36', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\x37', '\x35', '\x3', '\x2', '\x2', '\x2', '\x37', 
		'\x38', '\x3', '\x2', '\x2', '\x2', '\x38', '\x45', '\x3', '\x2', '\x2', 
		'\x2', '\x39', ';', '\t', '\x5', '\x2', '\x2', ':', '\x39', '\x3', '\x2', 
		'\x2', '\x2', ';', '<', '\x3', '\x2', '\x2', '\x2', '<', ':', '\x3', '\x2', 
		'\x2', '\x2', '<', '=', '\x3', '\x2', '\x2', '\x2', '=', '>', '\x3', '\x2', 
		'\x2', '\x2', '>', '@', '\a', '\x30', '\x2', '\x2', '?', '\x41', '\t', 
		'\x5', '\x2', '\x2', '@', '?', '\x3', '\x2', '\x2', '\x2', '\x41', '\x42', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '@', '\x3', '\x2', '\x2', '\x2', '\x42', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '\x43', '\x45', '\x3', '\x2', '\x2', 
		'\x2', '\x44', '\x35', '\x3', '\x2', '\x2', '\x2', '\x44', ':', '\x3', 
		'\x2', '\x2', '\x2', '\x45', '\x10', '\x3', '\x2', '\x2', '\x2', '\x46', 
		'G', '\a', '?', '\x2', '\x2', 'G', '\x12', '\x3', '\x2', '\x2', '\x2', 
		'H', 'I', '\a', '-', '\x2', '\x2', 'I', '\x14', '\x3', '\x2', '\x2', '\x2', 
		'J', 'K', '\a', ',', '\x2', '\x2', 'K', '\x16', '\x3', '\x2', '\x2', '\x2', 
		'L', 'M', '\a', '`', '\x2', '\x2', 'M', 'N', '\a', 'T', '\x2', '\x2', 
		'N', '\x18', '\x3', '\x2', '\x2', '\x2', 'O', 'P', '\a', '`', '\x2', '\x2', 
		'P', 'Q', '\a', '\x33', '\x2', '\x2', 'Q', '\x1A', '\x3', '\x2', '\x2', 
		'\x2', '\n', '\x2', '&', '.', '\x32', '\x37', '<', '\x42', '\x44', '\x3', 
		'\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
