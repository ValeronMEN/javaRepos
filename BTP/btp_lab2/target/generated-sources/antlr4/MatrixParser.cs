//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Matrix.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class MatrixParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, NL=4, WS=5, ID=6, NUMBER=7, EQUAL=8, SUM=9, MULT=10, 
		RANK=11, INVER=12;
	public const int
		RULE_root = 0, RULE_input = 1, RULE_init = 2, RULE_rank = 3, RULE_multsum = 4, 
		RULE_sum = 5, RULE_mult = 6, RULE_inver = 7, RULE_exp = 8, RULE_matr = 9, 
		RULE_vect = 10;
	public static readonly string[] ruleNames = {
		"root", "input", "init", "rank", "multsum", "sum", "mult", "inver", "exp", 
		"matr", "vect"
	};

	private static readonly string[] _LiteralNames = {
		null, "'['", "','", "']'", "'\n'", null, null, null, "'='", "'+'", "'*'", 
		"'^R'", "'^1'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "NL", "WS", "ID", "NUMBER", "EQUAL", "SUM", "MULT", 
		"RANK", "INVER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Matrix.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static MatrixParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MatrixParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MatrixParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class RootContext : ParserRuleContext {
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
	 
		public RootContext() { }
		public virtual void CopyFrom(RootContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MainRuleContext : RootContext {
		public InputContext input() {
			return GetRuleContext<InputContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(MatrixParser.Eof, 0); }
		public MainRuleContext(RootContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMatrixListener typedListener = listener as IMatrixListener;
			if (typedListener != null) typedListener.EnterMainRule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMatrixListener typedListener = listener as IMatrixListener;
			if (typedListener != null) typedListener.ExitMainRule(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(Context, State);
		EnterRule(_localctx, 0, RULE_root);
		try {
			_localctx = new MainRuleContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 22; input();
			State = 23; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputContext : ParserRuleContext {
		public InputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input; } }
	 
		public InputContext() { }
		public virtual void CopyFrom(InputContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class GoToInitializeContext : InputContext {
		public InitContext init() {
			return GetRuleContext<InitContext>(0);
		}
		public GoToInitializeContext(InputContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMatrixListener typedListener = listener as IMatrixListener;
			if (typedListener != null) typedListener.EnterGoToInitialize(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMatrixListener typedListener = listener as IMatrixListener;
			if (typedListener != null) typedListener.ExitGoToInitialize(this);
		}
	}
	public partial class DivisionFromStartContext : InputContext {
		public MultsumContext multsum() {
			return GetRuleContext<MultsumContext>(0);
		}
		public DivisionFromStartContext(InputContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMatrixListener typedListener = listener as IMatrixListener;
			if (typedListener != null) typedListener.EnterDivisionFromStart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMatrixListener typedListener = listener as IMatrixListener;
			if (typedListener != null) typedListener.ExitDivisionFromStart(this);
		}
	}
	public partial class GoToRankContext : InputContext {
		public RankContext rank() {
			return GetRuleContext<RankContext>(0);
		}
		public GoToRankContext(InputContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMatrixListener typedListener = listener as IMatrixListener;
			if (typedListener != null) typedListener.EnterGoToRank(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMatrixListener typedListener = listener as IMatrixListener;
			if (typedListener != null) typedListener.ExitGoToRank(this);
		}
	}

	[RuleVersion(0)]
	public InputContext input() {
		InputContext _localctx = new InputContext(Context, State);
		EnterRule(_localctx, 2, RULE_input);
		try {
			State = 28;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				_localctx = new GoToInitializeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 25; init();
				}
				break;
			case 2:
				_localctx = new GoToRankContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 26; rank();
				}
				break;
			case 3:
				_localctx = new DivisionFromStartContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 27; multsum();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitContext : ParserRuleContext {
		public InitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_init; } }
	 
		public InitContext() { }
		public virtual void CopyFrom(InitContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class InitializeContext : InitContext {
		public ITerminalNode ID() { return GetToken(MatrixParser.ID, 0); }
		public ITerminalNode EQUAL() { return GetToken(MatrixParser.EQUAL, 0); }
		public InputContext input() {
			return GetRuleContext<InputContext>(0);
		}
		public InitializeContext(InitContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMatrixListener typedListener = listener as IMatrixListener;
			if (typedListener != null) typedListener.EnterInitialize(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMatrixListener typedListener = listener as IMatrixListener;
			if (typedListener != null) typedListener.ExitInitialize(this);
		}
	}

	[RuleVersion(0)]
	public InitContext init() {
		InitContext _localctx = new InitContext(Context, State);
		EnterRule(_localctx, 4, RULE_init);
		try {
			_localctx = new InitializeContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 30; Match(ID);
			State = 31; Match(EQUAL);
			State = 32; input();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RankContext : ParserRuleContext {
		public RankContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rank; } }
	 
		public RankContext() { }
		public virtual void CopyFrom(RankContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RankRuleContext : RankContext {
		public MultsumContext multsum() {
			return GetRuleContext<MultsumContext>(0);
		}
		public ITerminalNode RANK() { return GetToken(MatrixParser.RANK, 0); }
		public RankRuleContext(RankContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMatrixListener typedListener = listener as IMatrixListener;
			if (typedListener != null) typedListener.EnterRankRule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMatrixListener typedListener = listener as IMatrixListener;
			if (typedListener != null) typedListener.ExitRankRule(this);
		}
	}

	[RuleVersion(0)]
	public RankContext rank() {
		RankContext _localctx = new RankContext(Context, State);
		EnterRule(_localctx, 6, RULE_rank);
		int _la;
		try {
			_localctx = new RankRuleContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 34; multsum();
			State = 36;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RANK) {
				{
				State = 35; Match(RANK);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultsumContext : ParserRuleContext {
		public MultsumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multsum; } }
	 
		public MultsumContext() { }
		public virtual void CopyFrom(MultsumContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MultsumSumContext : MultsumContext {
		public SumContext sum() {
			return GetRuleContext<SumContext>(0);
		}
		public MultsumSumContext(MultsumContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMatrixListener typedListener = listener as IMatrixListener;
			if (typedListener != null) typedListener.EnterMultsumSum(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMatrixListener typedListener = listener as IMatrixListener;
			if (typedListener != null) typedListener.ExitMultsumSum(this);
		}
	}
	public partial class MultsumMultContext : MultsumContext {
		public MultContext mult() {
			return GetRuleContext<MultContext>(0);
		}
		public MultsumMultContext(MultsumContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMatrixListener typedListener = listener as IMatrixListener;
			if (typedListener != null) typedListener.EnterMultsumMult(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMatrixListener typedListener = listener as IMatrixListener;
			if (typedListener != null) typedListener.ExitMultsumMult(this);
		}
	}

	[RuleVersion(0)]
	public MultsumContext multsum() {
		MultsumContext _localctx = new MultsumContext(Context, State);
		EnterRule(_localctx, 8, RULE_multsum);
		try {
			State = 40;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				_localctx = new MultsumSumContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 38; sum();
				}
				break;
			case 2:
				_localctx = new MultsumMultContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 39; mult();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SumContext : ParserRuleContext {
		public SumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sum; } }
	 
		public SumContext() { }
		public virtual void CopyFrom(SumContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MultSumSumOpContext : SumContext {
		public MultContext mult() {
			return GetRuleContext<MultContext>(0);
		}
		public ITerminalNode SUM() { return GetToken(MatrixParser.SUM, 0); }
		public SumContext sum() {
			return GetRuleContext<SumContext>(0);
		}
		public MultSumSumOpContext(SumContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMatrixListener typedListener = listener as IMatrixListener;
			if (typedListener != null) typedListener.EnterMultSumSumOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMatrixListener typedListener = listener as IMatrixListener;
			if (typedListener != null) typedListener.ExitMultSumSumOp(this);
		}
	}
	public partial class InverOpContext : SumContext {
		public InverContext inver() {
			return GetRuleContext<InverContext>(0);
		}
		public InverOpContext(SumContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMatrixListener typedListener = listener as IMatrixListener;
			if (typedListener != null) typedListener.EnterInverOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMatrixListener typedListener = listener as IMatrixListener;
			if (typedListener != null) typedListener.ExitInverOp(this);
		}
	}
	public partial class InverSumSumOpContext : SumContext {
		public InverContext inver() {
			return GetRuleContext<InverContext>(0);
		}
		public ITerminalNode SUM() { return GetToken(MatrixParser.SUM, 0); }
		public SumContext sum() {
			return GetRuleContext<SumContext>(0);
		}
		public InverSumSumOpContext(SumContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMatrixListener typedListener = listener as IMatrixListener;
			if (typedListener != null) typedListener.EnterInverSumSumOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMatrixListener typedListener = listener as IMatrixListener;
			if (typedListener != null) typedListener.ExitInverSumSumOp(this);
		}
	}

	[RuleVersion(0)]
	public SumContext sum() {
		SumContext _localctx = new SumContext(Context, State);
		EnterRule(_localctx, 10, RULE_sum);
		try {
			State = 51;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				_localctx = new MultSumSumOpContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 42; mult();
				State = 43; Match(SUM);
				State = 44; sum();
				}
				break;
			case 2:
				_localctx = new InverSumSumOpContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 46; inver();
				State = 47; Match(SUM);
				State = 48; sum();
				}
				break;
			case 3:
				_localctx = new InverOpContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 50; inver();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultContext : ParserRuleContext {
		public MultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mult; } }
	 
		public MultContext() { }
		public virtual void CopyFrom(MultContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class InverMultMultOpContext : MultContext {
		public InverContext inver() {
			return GetRuleContext<InverContext>(0);
		}
		public ITerminalNode MULT() { return GetToken(MatrixParser.MULT, 0); }
		public MultContext mult() {
			return GetRuleContext<MultContext>(0);
		}
		public InverMultMultOpContext(MultContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMatrixListener typedListener = listener as IMatrixListener;
			if (typedListener != null) typedListener.EnterInverMultMultOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMatrixListener typedListener = listener as IMatrixListener;
			if (typedListener != null) typedListener.ExitInverMultMultOp(this);
		}
	}

	[RuleVersion(0)]
	public MultContext mult() {
		MultContext _localctx = new MultContext(Context, State);
		EnterRule(_localctx, 12, RULE_mult);
		try {
			_localctx = new InverMultMultOpContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 53; inver();
			State = 54; Match(MULT);
			State = 55; mult();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InverContext : ParserRuleContext {
		public InverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inver; } }
	 
		public InverContext() { }
		public virtual void CopyFrom(InverContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class InversionContext : InverContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode INVER() { return GetToken(MatrixParser.INVER, 0); }
		public InversionContext(InverContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMatrixListener typedListener = listener as IMatrixListener;
			if (typedListener != null) typedListener.EnterInversion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMatrixListener typedListener = listener as IMatrixListener;
			if (typedListener != null) typedListener.ExitInversion(this);
		}
	}

	[RuleVersion(0)]
	public InverContext inver() {
		InverContext _localctx = new InverContext(Context, State);
		EnterRule(_localctx, 14, RULE_inver);
		int _la;
		try {
			_localctx = new InversionContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 57; exp();
			State = 59;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INVER) {
				{
				State = 58; Match(INVER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpContext : ParserRuleContext {
		public ExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp; } }
	 
		public ExpContext() { }
		public virtual void CopyFrom(ExpContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VariableContext : ExpContext {
		public ITerminalNode ID() { return GetToken(MatrixParser.ID, 0); }
		public VariableContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMatrixListener typedListener = listener as IMatrixListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMatrixListener typedListener = listener as IMatrixListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
	}
	public partial class GoToMatrixContext : ExpContext {
		public MatrContext matr() {
			return GetRuleContext<MatrContext>(0);
		}
		public GoToMatrixContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMatrixListener typedListener = listener as IMatrixListener;
			if (typedListener != null) typedListener.EnterGoToMatrix(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMatrixListener typedListener = listener as IMatrixListener;
			if (typedListener != null) typedListener.ExitGoToMatrix(this);
		}
	}

	[RuleVersion(0)]
	public ExpContext exp() {
		ExpContext _localctx = new ExpContext(Context, State);
		EnterRule(_localctx, 16, RULE_exp);
		try {
			State = 63;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				_localctx = new GoToMatrixContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 61; matr();
				}
				break;
			case ID:
				_localctx = new VariableContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 62; Match(ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatrContext : ParserRuleContext {
		public MatrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matr; } }
	 
		public MatrContext() { }
		public virtual void CopyFrom(MatrContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class GoToVectContext : MatrContext {
		public VectContext[] vect() {
			return GetRuleContexts<VectContext>();
		}
		public VectContext vect(int i) {
			return GetRuleContext<VectContext>(i);
		}
		public GoToVectContext(MatrContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMatrixListener typedListener = listener as IMatrixListener;
			if (typedListener != null) typedListener.EnterGoToVect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMatrixListener typedListener = listener as IMatrixListener;
			if (typedListener != null) typedListener.ExitGoToVect(this);
		}
	}

	[RuleVersion(0)]
	public MatrContext matr() {
		MatrContext _localctx = new MatrContext(Context, State);
		EnterRule(_localctx, 18, RULE_matr);
		int _la;
		try {
			_localctx = new GoToVectContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 65; Match(T__0);
			State = 66; vect();
			State = 71;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 67; Match(T__1);
				State = 68; vect();
				}
				}
				State = 73;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 74; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VectContext : ParserRuleContext {
		public VectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vect; } }
	 
		public VectContext() { }
		public virtual void CopyFrom(VectContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class GoToNumberContext : VectContext {
		public ITerminalNode[] NUMBER() { return GetTokens(MatrixParser.NUMBER); }
		public ITerminalNode NUMBER(int i) {
			return GetToken(MatrixParser.NUMBER, i);
		}
		public GoToNumberContext(VectContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMatrixListener typedListener = listener as IMatrixListener;
			if (typedListener != null) typedListener.EnterGoToNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMatrixListener typedListener = listener as IMatrixListener;
			if (typedListener != null) typedListener.ExitGoToNumber(this);
		}
	}

	[RuleVersion(0)]
	public VectContext vect() {
		VectContext _localctx = new VectContext(Context, State);
		EnterRule(_localctx, 20, RULE_vect);
		int _la;
		try {
			_localctx = new GoToNumberContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 76; Match(T__0);
			State = 77; Match(NUMBER);
			State = 82;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 78; Match(T__1);
				State = 79; Match(NUMBER);
				}
				}
				State = 84;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 85; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\xE', 'Z', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x1F', '\n', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x5', '\x5', '\'', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x5', '\x6', '+', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x5', '\a', '\x36', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x5', '\t', '>', '\n', '\t', 
		'\x3', '\n', '\x3', '\n', '\x5', '\n', '\x42', '\n', '\n', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', '\v', 'H', '\n', '\v', '\f', 
		'\v', '\xE', '\v', 'K', '\v', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\a', '\f', 'S', '\n', '\f', '\f', 
		'\f', '\xE', '\f', 'V', '\v', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x2', '\x2', '\r', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x12', '\x14', '\x16', '\x2', '\x2', '\x2', 'X', '\x2', '\x18', '\x3', 
		'\x2', '\x2', '\x2', '\x4', '\x1E', '\x3', '\x2', '\x2', '\x2', '\x6', 
		' ', '\x3', '\x2', '\x2', '\x2', '\b', '$', '\x3', '\x2', '\x2', '\x2', 
		'\n', '*', '\x3', '\x2', '\x2', '\x2', '\f', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\xE', '\x37', '\x3', '\x2', '\x2', '\x2', '\x10', ';', '\x3', 
		'\x2', '\x2', '\x2', '\x12', '\x41', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '\x16', 'N', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '\x19', '\x5', '\x4', '\x3', '\x2', '\x19', '\x1A', '\a', 
		'\x2', '\x2', '\x3', '\x1A', '\x3', '\x3', '\x2', '\x2', '\x2', '\x1B', 
		'\x1F', '\x5', '\x6', '\x4', '\x2', '\x1C', '\x1F', '\x5', '\b', '\x5', 
		'\x2', '\x1D', '\x1F', '\x5', '\n', '\x6', '\x2', '\x1E', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\x1F', '\x5', '\x3', '\x2', '\x2', 
		'\x2', ' ', '!', '\a', '\b', '\x2', '\x2', '!', '\"', '\a', '\n', '\x2', 
		'\x2', '\"', '#', '\x5', '\x4', '\x3', '\x2', '#', '\a', '\x3', '\x2', 
		'\x2', '\x2', '$', '&', '\x5', '\n', '\x6', '\x2', '%', '\'', '\a', '\r', 
		'\x2', '\x2', '&', '%', '\x3', '\x2', '\x2', '\x2', '&', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\'', '\t', '\x3', '\x2', '\x2', '\x2', '(', '+', 
		'\x5', '\f', '\a', '\x2', ')', '+', '\x5', '\xE', '\b', '\x2', '*', '(', 
		'\x3', '\x2', '\x2', '\x2', '*', ')', '\x3', '\x2', '\x2', '\x2', '+', 
		'\v', '\x3', '\x2', '\x2', '\x2', ',', '-', '\x5', '\xE', '\b', '\x2', 
		'-', '.', '\a', '\v', '\x2', '\x2', '.', '/', '\x5', '\f', '\a', '\x2', 
		'/', '\x36', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', '\x5', '\x10', 
		'\t', '\x2', '\x31', '\x32', '\a', '\v', '\x2', '\x2', '\x32', '\x33', 
		'\x5', '\f', '\a', '\x2', '\x33', '\x36', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\x36', '\x5', '\x10', '\t', '\x2', '\x35', ',', '\x3', '\x2', 
		'\x2', '\x2', '\x35', '\x30', '\x3', '\x2', '\x2', '\x2', '\x35', '\x34', 
		'\x3', '\x2', '\x2', '\x2', '\x36', '\r', '\x3', '\x2', '\x2', '\x2', 
		'\x37', '\x38', '\x5', '\x10', '\t', '\x2', '\x38', '\x39', '\a', '\f', 
		'\x2', '\x2', '\x39', ':', '\x5', '\xE', '\b', '\x2', ':', '\xF', '\x3', 
		'\x2', '\x2', '\x2', ';', '=', '\x5', '\x12', '\n', '\x2', '<', '>', '\a', 
		'\xE', '\x2', '\x2', '=', '<', '\x3', '\x2', '\x2', '\x2', '=', '>', '\x3', 
		'\x2', '\x2', '\x2', '>', '\x11', '\x3', '\x2', '\x2', '\x2', '?', '\x42', 
		'\x5', '\x14', '\v', '\x2', '@', '\x42', '\a', '\b', '\x2', '\x2', '\x41', 
		'?', '\x3', '\x2', '\x2', '\x2', '\x41', '@', '\x3', '\x2', '\x2', '\x2', 
		'\x42', '\x13', '\x3', '\x2', '\x2', '\x2', '\x43', '\x44', '\a', '\x3', 
		'\x2', '\x2', '\x44', 'I', '\x5', '\x16', '\f', '\x2', '\x45', '\x46', 
		'\a', '\x4', '\x2', '\x2', '\x46', 'H', '\x5', '\x16', '\f', '\x2', 'G', 
		'\x45', '\x3', '\x2', '\x2', '\x2', 'H', 'K', '\x3', '\x2', '\x2', '\x2', 
		'I', 'G', '\x3', '\x2', '\x2', '\x2', 'I', 'J', '\x3', '\x2', '\x2', '\x2', 
		'J', 'L', '\x3', '\x2', '\x2', '\x2', 'K', 'I', '\x3', '\x2', '\x2', '\x2', 
		'L', 'M', '\a', '\x5', '\x2', '\x2', 'M', '\x15', '\x3', '\x2', '\x2', 
		'\x2', 'N', 'O', '\a', '\x3', '\x2', '\x2', 'O', 'T', '\a', '\t', '\x2', 
		'\x2', 'P', 'Q', '\a', '\x4', '\x2', '\x2', 'Q', 'S', '\a', '\t', '\x2', 
		'\x2', 'R', 'P', '\x3', '\x2', '\x2', '\x2', 'S', 'V', '\x3', '\x2', '\x2', 
		'\x2', 'T', 'R', '\x3', '\x2', '\x2', '\x2', 'T', 'U', '\x3', '\x2', '\x2', 
		'\x2', 'U', 'W', '\x3', '\x2', '\x2', '\x2', 'V', 'T', '\x3', '\x2', '\x2', 
		'\x2', 'W', 'X', '\a', '\x5', '\x2', '\x2', 'X', '\x17', '\x3', '\x2', 
		'\x2', '\x2', '\n', '\x1E', '&', '*', '\x35', '=', '\x41', 'I', 'T',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
