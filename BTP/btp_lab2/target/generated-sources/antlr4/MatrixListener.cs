//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Matrix.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="MatrixParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public interface IMatrixListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by the <c>MainRule</c>
	/// labeled alternative in <see cref="MatrixParser.root"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMainRule([NotNull] MatrixParser.MainRuleContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MainRule</c>
	/// labeled alternative in <see cref="MatrixParser.root"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMainRule([NotNull] MatrixParser.MainRuleContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>GoToInitialize</c>
	/// labeled alternative in <see cref="MatrixParser.input"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGoToInitialize([NotNull] MatrixParser.GoToInitializeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>GoToInitialize</c>
	/// labeled alternative in <see cref="MatrixParser.input"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGoToInitialize([NotNull] MatrixParser.GoToInitializeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>GoToRank</c>
	/// labeled alternative in <see cref="MatrixParser.input"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGoToRank([NotNull] MatrixParser.GoToRankContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>GoToRank</c>
	/// labeled alternative in <see cref="MatrixParser.input"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGoToRank([NotNull] MatrixParser.GoToRankContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DivisionFromStart</c>
	/// labeled alternative in <see cref="MatrixParser.input"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDivisionFromStart([NotNull] MatrixParser.DivisionFromStartContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DivisionFromStart</c>
	/// labeled alternative in <see cref="MatrixParser.input"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDivisionFromStart([NotNull] MatrixParser.DivisionFromStartContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Initialize</c>
	/// labeled alternative in <see cref="MatrixParser.init"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInitialize([NotNull] MatrixParser.InitializeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Initialize</c>
	/// labeled alternative in <see cref="MatrixParser.init"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInitialize([NotNull] MatrixParser.InitializeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>RankRule</c>
	/// labeled alternative in <see cref="MatrixParser.rank"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRankRule([NotNull] MatrixParser.RankRuleContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>RankRule</c>
	/// labeled alternative in <see cref="MatrixParser.rank"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRankRule([NotNull] MatrixParser.RankRuleContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MultsumSum</c>
	/// labeled alternative in <see cref="MatrixParser.multsum"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultsumSum([NotNull] MatrixParser.MultsumSumContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MultsumSum</c>
	/// labeled alternative in <see cref="MatrixParser.multsum"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultsumSum([NotNull] MatrixParser.MultsumSumContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MultsumMult</c>
	/// labeled alternative in <see cref="MatrixParser.multsum"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultsumMult([NotNull] MatrixParser.MultsumMultContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MultsumMult</c>
	/// labeled alternative in <see cref="MatrixParser.multsum"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultsumMult([NotNull] MatrixParser.MultsumMultContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MultSumSumOp</c>
	/// labeled alternative in <see cref="MatrixParser.sum"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultSumSumOp([NotNull] MatrixParser.MultSumSumOpContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MultSumSumOp</c>
	/// labeled alternative in <see cref="MatrixParser.sum"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultSumSumOp([NotNull] MatrixParser.MultSumSumOpContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>InverSumSumOp</c>
	/// labeled alternative in <see cref="MatrixParser.sum"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInverSumSumOp([NotNull] MatrixParser.InverSumSumOpContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>InverSumSumOp</c>
	/// labeled alternative in <see cref="MatrixParser.sum"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInverSumSumOp([NotNull] MatrixParser.InverSumSumOpContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>InverOp</c>
	/// labeled alternative in <see cref="MatrixParser.sum"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInverOp([NotNull] MatrixParser.InverOpContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>InverOp</c>
	/// labeled alternative in <see cref="MatrixParser.sum"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInverOp([NotNull] MatrixParser.InverOpContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>InverMultMultOp</c>
	/// labeled alternative in <see cref="MatrixParser.mult"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInverMultMultOp([NotNull] MatrixParser.InverMultMultOpContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>InverMultMultOp</c>
	/// labeled alternative in <see cref="MatrixParser.mult"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInverMultMultOp([NotNull] MatrixParser.InverMultMultOpContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Inversion</c>
	/// labeled alternative in <see cref="MatrixParser.inver"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInversion([NotNull] MatrixParser.InversionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Inversion</c>
	/// labeled alternative in <see cref="MatrixParser.inver"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInversion([NotNull] MatrixParser.InversionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>GoToMatrix</c>
	/// labeled alternative in <see cref="MatrixParser.exp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGoToMatrix([NotNull] MatrixParser.GoToMatrixContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>GoToMatrix</c>
	/// labeled alternative in <see cref="MatrixParser.exp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGoToMatrix([NotNull] MatrixParser.GoToMatrixContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Variable</c>
	/// labeled alternative in <see cref="MatrixParser.exp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariable([NotNull] MatrixParser.VariableContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Variable</c>
	/// labeled alternative in <see cref="MatrixParser.exp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariable([NotNull] MatrixParser.VariableContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>GoToVect</c>
	/// labeled alternative in <see cref="MatrixParser.matr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGoToVect([NotNull] MatrixParser.GoToVectContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>GoToVect</c>
	/// labeled alternative in <see cref="MatrixParser.matr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGoToVect([NotNull] MatrixParser.GoToVectContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>GoToNumber</c>
	/// labeled alternative in <see cref="MatrixParser.vect"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGoToNumber([NotNull] MatrixParser.GoToNumberContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>GoToNumber</c>
	/// labeled alternative in <see cref="MatrixParser.vect"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGoToNumber([NotNull] MatrixParser.GoToNumberContext context);
}
